// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Game {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  squares       Json      // Stores the game board state
  nextPlayer    String    // 'X' or 'O'
  gameStatus    String    // 'waiting', 'active', 'completed', 'draw'
  winner        String?   // 'X', 'O', or null
  moves         Move[]    // Game history
  playerX       User?     @relation("PlayerX", fields: [playerXId], references: [id])
  playerXId     String?
  playerO       User?     @relation("PlayerO", fields: [playerOId], references: [id])
  playerOId     String?
  playerXReady  Boolean   @default(false)
  playerOReady  Boolean   @default(false)
  players       Player[]  // Add opposite relation for Player model
}

model Player {
  id            String    @id @default(uuid())
  socketId      String    @unique
  symbol        String    // 'X' or 'O'
  isReady       Boolean   @default(false)
  timeRemaining Int       @default(60)
  gameId        Int       // Changed from String to Int
  game          Game      @relation(fields: [gameId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Move {
  id            Int       @id @default(autoincrement())
  position      Int
  symbol        String    // 'X' or 'O'
  gameId        Int       // Changed from String to Int
  game          Game      @relation(fields: [gameId], references: [id])
  playedAt      DateTime  @default(now())
  playerId      String    // ID of the user who made the move
  player        User      @relation(fields: [playerId], references: [id])
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  gamesAsX      Game[]    @relation("PlayerX")
  gamesAsO      Game[]    @relation("PlayerO")
  moves         Move[]
}